/*
 * Copyright 2012 Inomera Research
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "Netmera.h"

typedef enum {
    LoginTypeNone,
    LoginTypeFacebook,
    LoginTypeTwitter,
    LoginTypeEmail,
    LoginTypeGuest
} LoginType;

/**
 * The NMUser class is used to perform regarding operations in order to create a user management system in the application.
 *  Registering, updating and logging users are the operations performed over NMUser instances. All registered users are
 *  stored over cloud.
 */

@interface NMUser : NMCore

/**
 * Email address of the registered user.
 */
@property (nonatomic, strong) NSString *email;

/**
 * Password of the registered user.
 */
@property (nonatomic, strong) NSString *password;

/**
 * Nickname of the registered user.
 */
@property (nonatomic, strong) NSString *nickname;

/**
 * Name of the registered user.
 */
@property (nonatomic, strong) NSString *name;

/**
 * Surname of the registered user.
 */
@property (nonatomic, strong) NSString *surname;

/**
 * Identifier given by Facebook when logging on the user with a Facebook account.
 */
@property (nonatomic, strong) NSString *facebookId;

/**
 * Identifier given by Twitter when logging on the user with a Twitter account.
 */
@property (nonatomic, strong) NSString *twitterUserName;

/**
 Custom key-value pairs assigned to the registered user.
 
 @discussion The value on the user is overridden every time newly-created customDictionary property is sent with any request.
 */
@property (nonatomic, strong) NSMutableDictionary *customDictionary;

/**
 * Enum type which indicates how the user login into the application.
 *
 *  @warning Available enum options for LoginType
 *
 *  LoginTypeNone, user does not login yet.
 *
 *  LoginTypeFacebook, user logins with a Facebook account.
 *
 *  LoginTypeTwitter, user logins with a Twitter account.
 *
 *  LoginTypeEmail, user logins with an email account.
 *
 *  LoginTypeGuest, user logins as guest.
 */
@property (nonatomic, readonly, assign) LoginType activeLoginType;

/**
 * The boolean value which shows whether the user is a newly-registered or not.
 */
@property BOOL isNewUser;

/**
 * The boolean value which shows whether the email of the user is generated by the system or not.
 */
@property BOOL isGeneratedMail;

typedef void(^NMUserResponseHandler)(NMUser *user, NSError *error);

/**
 * Returns the current logged user.
 *
 *  @return Current logged user in the application. Returns nil if there is no logged user.
 */
+ (NMUser *)getCurrentUser;

/**
 * Registers a new user to the application. Email, password and nickname properties must be set on the user 
 *  because they are required fields; otherwise, name, surname and customDictionary properties are optional.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual 
 *      error object containing the error information. You may specify nil for this parameter if you do not want
 *      the error information.
 *
 *  @return YES if the user is registered succesfully. Returns NO if an error occurs.
 *
 *  @discussion Rest of properties except the ones mentioned above should not be set. They will be set automatically
 *      after calling the relevant method.
 */
- (BOOL)registerWithError:(NSError **)error;

/**
 * Registers a new user to the application on the background thread. Email, password and nickname properties must be 
 *  set on the user because they are required fields; otherwise, name, surname and customDictionary properties are optional.
 *
 *  @param handler The block to execute when the registration of the user is completed.
 *
 *  @discussion Rest of properties except the ones mentioned above should not be set. They will be set automatically
 *      after calling the relevant method.
 *   As background methods does not block your main thread, it is recommended to use registerInBackgroundWithCompletionHandler: 
 *      over registerWithError:.
 */
- (void)registerInBackgroundWithCompletionHandler:(void(^)(NSError *error))handler;

/**
 * Updates a registered user. Only the properties on the caller NMUser object are updated. All properties except email 
 *  can be updated.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object 
 *      containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return YES if the user is updated succesfully. Returns NO if an error occurs.
 */
- (BOOL)update:(NSError **)error __deprecated;

/**
 * Updates a registered user. Only the properties on the caller NMUser object are updated. All properties except email 
 *  can be updated.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error
 *      object containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return YES if the user is updated succesfully. Returns NO if an error occurs.
 */
- (BOOL)updateWithError:(NSError **)error;

/**
 * Updates a registered user on the background thread. Only the properties on the caller NMUser object are updated. All 
 *  properties except email can be updated.
 *
 *  @param handler The block to execute when the update of the user is completed.
 *
 *  @discussion As background methods does not block your main thread, it is recommended to use
 *      updateInBackgroundWithCompletionHandler: over updateWithError: or update:.
 */
- (void)updateInBackgroundWithCompletionHandler:(void(^)(NSError *error))handler;

/**
 * Logs on a user with email for the application.
 *
 *  @param email Email address of the registered user.
 *
 *  @param password Password of the registered user.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object 
 *      containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return Logged NMUser object if login is completed succesfully. Returns NO if an error occurs.
 *
 *  @discussion The logged user is saved in cache until calling logout method.
 */
+ (NMUser *)loginWithEmail:(NSString *)email password:(NSString *)password error:(NSError **)error;

/**
 * Logs on a user with email for the application on the background thread.
 *
 *  @param email Email address of the registered user.
 *
 *  @param password Password of the registered user.
 *
 *  @param handler The block to execute when the login of the user is completed.
 *
 *  @discussion The logged user is saved in cache until calling logout method.
 *   As background methods does not block your main thread, it is recommended to use 
 *      loginInBackgroundWithEmail:password:completionHandler: over loginWithEmail:password:error:.
 */
+ (void)loginInBackgroundWithEmail:(NSString *)email password:(NSString *)password completionHandler:(void(^)(NMUser *user,NSError *error))handler;

/**
 * Logs on a guest user for the application. Guest user means a user with no property set.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object 
 *      containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return Logged guest NMUser object if login is completed succesfully. Returns NO if an error occurs.
 *
 *  @discussion The logged user is saved in cache until calling logout method.
 */
+ (NMUser *)loginAsGuestWithError:(NSError **)error;

/**
 * Logs on a guest user for the application on the background thread. Guest user means a user with no property set.
 *
 *  @param handler The block to execute when the login of the user is completed.
 *
 *  @discussion The logged user is saved in cache until calling logout method.
 *   As background methods does not block your main thread, it is recommended to use 
 *      loginAsGuestInBackgroundWithCompletionHandler: over loginAsGuestWithError:.
 */
+ (void)loginAsGuestInBackgroundWithCompletionHandler:(void(^)(NMUser *user,NSError *error))handler;

/**
 * Logs the user out of the application.
 *
 *  @discussion Calling this method removes the current user from the cache.
 */
+ (void)logout;

/**
 * Activates login operation for a registered user.
 *
 *  @param email Email address of the registered user.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object
 *  containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return YES if the user is activated succesfully. Returns NO if an error occurs.
 *
 *  @discussion When a newly-created user is registered to the application, it is activated automatically.
 */
+ (BOOL)activateUserWithEmail:(NSString *)email andError:(NSError **)error;

/**
 * Deactivates login operation for a registered user.
 *
 *  @param email Email address of the registered user.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object 
 *  containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return YES if the user is deactivated succesfully. Returns NO if an error occurs.
 */
+ (BOOL)deactivateUserWithEmail:(NSString *)email andError:(NSError **)error;

@end