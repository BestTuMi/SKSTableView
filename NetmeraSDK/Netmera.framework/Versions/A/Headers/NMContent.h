/*
 * Copyright 2012 Inomera Research
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import "Netmera.h"
#import "NMPrivacy.h"

/**
 * The NMContent class is used to run CRUD (Create, Update and Delete) operations over the data. Fields on NMContent objects 
 *  can be instances of certain classes. While creating or updating your contents, you should beware of class limitations. 
 *  The objects created by this class are stored over cloud. Whenever you need your content data, you can access them easily 
 *  over cloud.
 */

@interface NMContent : NMCore

/** 
 * Identifier of the NMContent object.
 *
 *  @discussion This value represents the contents which have the same fields. You can think this string value as the 
 *      name of the table in the relational databases.
 */
@property (nonatomic, strong) NSString *objectName __deprecated;

/**
 * Identifier of the NMContent object.
 *
 *  @discussion This value represents the contents which have the same fields. You can think this string value as the 
 *  name of the table in the relational databases.
 */
@property (nonatomic, strong) NSString *identifier;

/** 
 * Path of the NMContent object.
 *
 *  @discussion This value is generated by Netmera automatically in the creation process of any NMContent object. Every
 *      content has unique path throuhout the application. You do NOT have to set this value by creationg your content. 
 *      After creation, path string is set over your content automatically.
 */
@property (nonatomic, strong) NSString *path;

/** 
 * Create date of the NMContent object.
 *
 *  @discussion This value is generated by Netmera automatically in the creation process of any NMContent object. You do 
 *      NOT have to set this value by creating your content. After creation, String representation of creation date of 
 *      your content is set automatically.
 */
@property(nonatomic, readonly, strong) NSString *createDate;

/**
 * Update date of the NMContent object.
 *
 *  @discussion This value is generated by Netmera automatically in every update process of any NMContent object. You do 
 *      NOT have to set this value by updating your content. After update operation, String representation of update 
 *      date of your content is set automatically.
 */
@property(nonatomic, readonly, strong) NSString *updateDate;

/** 
 * Privacy of the NMContent object.
 *
 *  @discussion This value is used to determine the accessibility of the NMContent object.
 *
 *  @warning Available enum options for privacy:
 *
 *      NMPrivacyPublic, permits all users to access content.
 *
 *      NMPrivacyPrivate, permits only admin and the user, which possesses the content to access it.
 */
@property (nonatomic, assign) NMPrivacy privacy;

/**
 * Initializes the newly allocated NMContent object with the specified identifier value.
 *
 *  @param identifier Identifier of the NMContent object.
 *
 *  @return An initialized NMContent object.
 */
- (NMContent *)initWithObjectName:(NSString *)objectName __deprecated;

/**
 * Initializes the newly allocated NMContent object with the specified identifier value.
 *
 *  @param identifier Identifier of the NMContent object.
 *
 *  @return An initialized NMContent object.
 */
- (id)initWithIdentifier:(NSString *)identifier;


typedef void(^NMContentResponseHandler)(NMContent *content, NSError *error);

/**
 * Creates a content that contains JSON-compatible key-value pairs over cloud. Since these contents have shameless
 *  structure, you can set whatever key-value pairs you want by the condition that keys should be alphanumeric strings
 *  and values should be JSON-encoded objects.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object 
 *      containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return YES if the content is created successfully. Returns NO if an error occured.
 */
- (BOOL)create:(NSError**)error __deprecated;

/**
 * Creates a content that contains JSON-compatible key-value pairs over cloud. Since these contents have shameless structure, 
 *  you can set whatever key-value pairs you want by the condition that keys should be alphanumeric strings and values 
 *  should be JSON-encoded objects.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object 
 *      containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return YES if the content is created successfully. Returns NO if an error occurs.
 */
- (BOOL)createWithError:(NSError **)error;

/**
 * Creates a content that contains JSON-compatible key-value pairs over cloud on background thread and executes the given 
 *  handler block at the completion of running method. Since these contents have shameless structure, you can set whatever 
 *  key-value pairs you want by the condition that keys should be alphanumeric strings and values should be JSON-encoded 
 *  objects.
 *
 *  @param handler The block to execute when the creation of the content is completed.
 *
 *  @discussion As background methods does not block your main thread, it is recommended to use 
 *      createInBackgroundWithCompletionHandler: over createWithError: or create:.
 */
- (void)createInBackgroundWithCompletionHandler:(NMContentResponseHandler)handler;

/**
 * Updates a content that contains JSON-compatible key-value pairs over cloud. After adding needful key-value pairs, call 
 *  this method over receiver.
 *
 *  @warning In order to update a content, firstly the relevant content should be fetched using get or search methods.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object 
 *      containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return YES if the content is updated successfully. Returns NO if an error occurs.
 */
- (BOOL)update:(NSError **)error __deprecated;

/**
 * Updates a content that contains JSON-compatible key-value pairs over cloud. After adding needful key-value pairs, call 
 *  this method over receiver.
 *
 *  @warning In order to update a content, firstly the relevant content should be fetched using get or search methods.
 *
 *  @param error On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object 
 *      containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return YES if the content is updated successfully. Returns NO if an error occurs.
 */
- (BOOL)updateWithError:(NSError **)error;

/**
 * Updates a content that contains JSON-compatible key-value pairs over cloud on background thread and executes the given 
 *  handler block at the completion of running method. After adding needful key-value pairs, call this method over receiver.
 *
 *  @warning In order to update a content, firstly the relevant content should be fetched using get or search methods.
 *
 *  @param handler The block to execute when update of the content is completed.
 *
 *  @discussion As background methods does not block your main thread, it is recommended to use 
 *      updateInBackgroundWithCompletionHandler: over updateWithError: or update:.
 */
- (void)updateInBackgroundWithCompletionHandler:(NMContentResponseHandler)handler;

/**
 * Removes the receiver content from cloud.
 *
 *  @warning In order to delete a content, you should be sure that you set its path correctly or directly call this 
 *      method on fetched content.
 *
 *  @param On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object 
 *      containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return YES if the content is deleted successfully. Returns NO if an error occurs.
 */
- (BOOL)delete:(NSError **)error __deprecated;

/**
 * Removes the receiver content from cloud.
 *
 *  @warning In order to delete a content, you should be sure that you set its path correctly or directly call this method 
 *      on fetched content.
 *
 *  @param On input, a pointer to an error object. If an error occurs, this pointer is set to an actual error object 
 *      containing the error information. You may specify nil for this parameter if you do not want the error information.
 *
 *  @return YES if the content is deleted successfully. Returns NO if an error occurs.
 */
- (BOOL)deleteWithError:(NSError **)error;

/**
 * Removes the receiver content from cloud on the background thread and executes the given handler block at the completion 
 *  of running method.
 *
 *  @warning In order to delete a content, you should be sure that you set its path correctly or directly call this method 
 *      on fetched content.
 *
 *  @param handler The block to execute when delete of the content is completed.
 *
 *  @discussion As background methods does not block your main thread, it is recommended to use 
 *      deleteInBackgroundWithCompletionHandler: over deleteWithError: or delete:.
 */
- (void)deleteInBackgroundWithCompletionHandler:(void(^)(NSError *error))handler;

/**
 * Adds JSON-compatible key-value pairs into the object. If the object contains the given key, the old value is replaced 
 *  with the new ones.
 *
 *  @param key Alphanumeric string that represents the key value.
 *
 *  @param value Object value associated with the specified key. This value can be an instance of the below classes:
 *
 *      NSString, NSNumber, NSDate, NSData, NSDictionary (members must be one of the mentioned class instances), 
 *      NSArray (members must be one of the above instance), NMGeolocation, NMUser.
 *
 *  @warning Raises an exception if value is not an object that NSDictionary accepts or the value is not a 
 *      JSON-compatible object.
 */
- (void)add:(NSString *)key object:(NSObject*)value __deprecated;

/**
 * Adds JSON-compatible key-value pairs into the object. If the object contains the given key, the old value is replaced 
 *  with the new ones.
 *
 *  @param key Alphanumeric string that represents the key value.
 *
 *  @param value Object value associated with the specified key. This value can be an instance of the below classes:
 *
 *      NSString, NSNumber, NSDate, NSData, NSDictionary (members must be one of the mentioned class instances), 
 *      NSArray (members must be one of the above instance), NMGeolocation, NMUser.
 *
 *  @warning Raises an exception if value is not an object that NSDictionary accepts or the value is not a 
 *      JSON-compatible object.
 */
- (void)setObject:(id)object forKey:(NSString *)key;

/**
 * Adds JSON-compatible key-value pairs into the object. If the object contains the given key, the old value is 
 *  replaced with the new ones. Value is a BOOL type.
 *
 *  @param key Alphanumeric string that represents the key value.
 *
 *  @param value BOOL value associated with the specified key.
 *
 *  @warning Raises an exception if value is not an object that NSDictionary accepts or the value is not a 
 *      JSON-compatible object.s
 */
- (void)addBool:(NSString *)key object:(BOOL)value __deprecated;

/**
 * Adds JSON-compatible key-value pairs into the object. If the object contains the given key, the old value is 
 *  replaced with the new ones. Value is a BOOL type.
 *
 *  @param key Alphanumeric string that represents the key value.
 *
 *  @param value BOOL value associated with the specified key.
 *
 *  @warning Raises an exception if value is not an object that NSDictionary accepts or the value is not a 
 *      JSON-compatible object.s
 */
- (void)setBool:(BOOL)value forKey:(NSString *)key;

/**
 * Increases/decreases a field of a content by the given value on create or update operation. If the value is a
 *  positive number, the field is increased, otherwise it is decreased.
 *
 *  @param value The increment or decrement value for the field.
 *
 *  @param key Alphanumeric string that represents the field to perform operation.
 *
 *  @discussion If the field does not exist for a content object while creating or updating, new field is created for 
 *      it with the given key and value.
*/
- (void)incrementByValue:(NSNumber *)value forKey:(NSString *)key;

/**
 * Returns the object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (id)objectForKey:(NSString *)key;

/**
 * Returns the object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (NSObject *)get:(NSString *)key __deprecated;

/**
 * Returns the NSString object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The NSString object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (NSString *)getString:(NSString *)key __deprecated;

/**
 * Returns the integer value associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The integer value for the specified key. Returns NSNotFound if key-value pairs does not exist in the content object.
 */
- (int)getInt:(NSString *)key __deprecated;

/**
 * Returns the long value associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The long value for the specified key. Returns NSNotFound if key-value pairs does not exist in the content object.
 */
- (long)getLong:(NSString *)key __deprecated;

/**
 * Returns the boolean value associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The long value for the specified key. Returns NSNotFound if key-value pairs does not exist in the content object.
 */
- (BOOL)getBool:(NSString *)key __deprecated;

/**
 * Returns the boolean value associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The boolean value for the specified key. Returns NSNotFound if key-value pairs does not exist in the content object.
 */
- (BOOL)boolForKey:(NSString *)key;

/**
 * Returns the double value associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The double value for the specified key. Returns NSNotFound if key-value pairs does not exist in the content object.
 */
- (double)getDouble:(NSString *)key __deprecated;

/**
 * Returns the NSDictionary object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The NSDictionary object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (NSDictionary *)getDictionary:(NSString *)key __deprecated;

/**
 * Returns the NSArray object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The NSArray object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (NSArray *)getArray:(NSString *)key __deprecated;

/**
 * Returns the NSDate object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The NSDate object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (NSDate *)getDate:(NSString *)key __deprecated;

/**
 * Returns the NSDate object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The NSDate object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (NSDate *)dateForKey:(NSString *)key;

/**
 * Returns the NMGeolocation object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The NMGeolocation object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (NMGeolocation *)getLocation:(NSString *)key __deprecated;

/**
 * Returns the NMGeolocation object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The NMGeolocation object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (NMGeolocation *)locationForKey:(NSString *)key;

/**
 * Returns the NMUser object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The NMUser object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (NMUser *)getUser:(NSString *)key __deprecated;

/**
 * Returns the NMUser object associated with the given key.
 *
 *  @param key Alphanumeric string that corresponds the requested object.
 *
 *  @return The NMUser object for the specified key. Returns nil if key-value pairs does not exist in the content object.
 */
- (NMUser *)userForKey:(NSString *)key;

/**
 * Sets the owner of this content. This provides that the receiver NMContent object is private for just the owner.
 *
 *  @param user Owner of the content.
 *
 *  @discussion You cannot give any user object as the owner of the content. The user should be login to the application 
 *  for the current state.
 */
- (void)setOwner:(NMUser *)user;

@end
